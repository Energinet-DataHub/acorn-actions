name: Dotnet Validate

description: Lints and tests a domain.

inputs:
  path:
    description: The path of the parent folder of the solution.
    required: true

  project:
    description: The path of a project file that is used to generate migrations with, if needed. Both project and migrations must be present for the check to happen.
    default: ""
    required: false

  migrations:
    description: The path of a commited sql file, that needs to be validated against. Both project and migrations must be present for the check to happen.
    default: ""
    required: false

  dotnet-version:
    description: The version of dotnet to use
    required: true

  pin-version:
    description: Pin dotnet version
    default: "false"
    required: false

runs:
  using: composite

  steps:
    - name: Setup dotnet
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ inputs.dotnet-version }}

    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Pin version
      working-directory: ${{ inputs.path }}
      shell: bash
      if: ${{ inputs.pin-version == 'true' }}
      run: printf '{"sdk":{"rollForward":"disable","version":"%s"}}' "${{ inputs.dotnet-version }}" > global.json

    - name: Print dotnet version
      working-directory: ${{ inputs.path }}
      shell: bash
      run: dotnet --version

    - name: Print dotnet information
      working-directory: ${{ inputs.path }}
      shell: bash
      run: dotnet --info

    - name: Restore tools
      working-directory: ${{ inputs.path }}
      shell: bash
      env:
        version: ""
      run: |
        dotnet tool restore || true

    - name: Restore
      shell: bash
      env:
        version: ""
      run: |
        dotnet restore "${{ inputs.project }}"

    - name: Validate migration
      shell: bash
      env:
        VERSION: ${{ inputs.dotnet-version }}
        PROJECT: ${{ inputs.project }}
        COMMITED_SQL_FILE: ${{ inputs.migrations }}
      if: ${{ '' != inputs.migrations && '' != inputs.project }}
      run: |
        GENERATED_SQL_FILE=/tmp/current.sql
        version=$(echo $VERSION | cut -c 1)
        if [ "$version" = "6" ]; then
          argument="--version 6.0.25"
        elif [ "$version" = "7" ]; then
          argument="--version 7.0.14"
        fi
        dotnet list package --project "$PROJECT" --format=json | grep 'Microsoft.EntityFrameworkCore"' >/dev/null || exit 0
        dotnet tool install --global $argument dotnet-ef >/dev/null
        dotnet ef migrations script --project "$PROJECT" -i -o "$GENERATED_SQL_FILE"

        cat < "$GENERATED_SQL_FILE" | sed '/INSERT INTO "__EFMigrationsHistory"/,/);$/d' > /tmp/a
        cat < "$COMMITED_SQL_FILE" | sed '/INSERT INTO "__EFMigrationsHistory"/,/);$/d' > /tmp/b
        diff -q /tmp/a /tmp/b >/dev/null || { echo "Unexpected difference:"; diff /tmp/a /tmp/b; exit 1; }
