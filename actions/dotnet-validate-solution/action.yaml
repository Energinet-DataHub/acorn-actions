name: Dotnet Validate

description: Lints and tests a domain.

inputs:
  path:
    description: The path of the parent folder of the solution.
    required: true

  dotnet-version:
    description: The version of dotnet to use
    required: true

  pin-version:
    description: Pin dotnet version
    default: "false"
    required: false

runs:
  using: composite

  steps:
    - name: Setup dotnet
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ inputs.dotnet-version }}

    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Pin version
      working-directory: ${{ inputs.path }}
      shell: bash
      if: ${{ inputs.pin-version == 'true' }}
      run: printf '{"sdk":{"rollForward":"disable","version":"%s"}}' "${{ inputs.dotnet-version }}" > global.json

    - name: Print dotnet version
      working-directory: ${{ inputs.path }}
      shell: bash
      run: dotnet --version

    - name: Print dotnet information
      working-directory: ${{ inputs.path }}
      shell: bash
      run: dotnet --info

    - name: Restore
      working-directory: ${{ inputs.path }}
      shell: bash
      env:
        version: ""
      run: |
        dotnet tool restore || true
        dotnet restore

    - name: List Non-Compliant NuGet Packages
      working-directory: ${{ inputs.path }}
      shell: bash
      run: |
        echo "Analyzing NuGet dependencies..."

        # Find all project files
        projects=$(find . -name "*.csproj" -not -path "./**/obj/*")

        # Initialize arrays for non-compliant packages
        pre_release_packages=()
        under_versioned_packages=()

        # Process each project
        for project in $projects; do
          echo "Checking $project..."

          # Get direct dependencies
          dependencies=$(dotnet list "$project" package --include-transitive | grep -E "^\s*[a-zA-Z0-9]")

          # Process each dependency
          while IFS= read -r line; do
            package=$(echo "$line" | awk '{print $1}')
            version=$(echo "$line" | awk '{print $2}')

            # Check for pre-release versions
            if [[ "$version" =~ - ]]; then
              pre_release_packages+=("{\"project\":\"$(basename "${project%.*}")\",\"package\":\"$package\",\"version\":\"$version\"}")
            fi

            # Check for versions under 1.0.0
            if [[ "$version" =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
              major=$(echo "$version" | cut -d '.' -f 1)
              if (( major < 1 )); then
                under_versioned_packages+=("{\"project\":\"$(basename "${project%.*}")\",\"package\":\"$package\",\"version\":\"$version\"}")
              fi
            fi
          done <<< "$dependencies"
        done

        # Output results
        echo "Non-compliant NuGet packages found:"
        echo "Pre-release packages:"
        printf '%s\n' "${pre_release_packages[@]}"
        echo "\nUnder-versioned packages (below 1.0.0):"
        printf '%s\n' "${under_versioned_packages[@]}"

        # Create JSON output for artifact
        echo "{
          \"nonCompliantDependencies\": {
            \"preRelease\": [${pre_release_packages[@]/%/,}],
            \"underVersioned\": [${under_versioned_packages[@]/%/,}]
          }
        }" > non-compliant-packages.json

    - name: Upload validation results
      uses: actions/upload-artifact@v4
      with:
        name: non-compliant-packages
        path: non-compliant-packages.json

    - name: Lint
      working-directory: ${{ inputs.path }}
      shell: bash
      env:
        version: ""
      run: dotnet format --verify-no-changes -v diag

    - name: Test
      working-directory: ${{ inputs.path }}
      shell: bash
      env:
        version: ""
      run: dotnet test --no-restore -warnaserror --logger:"console;verbosity=normal"
