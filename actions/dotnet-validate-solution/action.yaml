name: Dotnet Validate

description: Lints and tests a domain.

inputs:
  path:
    description: The path of the parent folder of the solution.
    required: true

  dotnet-version:
    description: The version of dotnet to use
    required: true

  pin-version:
    description: Pin dotnet version
    default: "false"
    required: false

runs:
  using: composite

  steps:
    - name: Setup dotnet
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ inputs.dotnet-version }}

    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Pin version
      working-directory: ${{ inputs.path }}
      shell: bash
      if: ${{ inputs.pin-version == 'true' }}
      run: printf '{"sdk":{"rollForward":"disable","version":"%s"}}' "${{ inputs.dotnet-version }}" > global.json

    - name: Print dotnet version
      working-directory: ${{ inputs.path }}
      shell: bash
      run: dotnet --version

    - name: Print dotnet information
      working-directory: ${{ inputs.path }}
      shell: bash
      run: dotnet --info

    - name: Restore
      working-directory: ${{ inputs.path }}
      shell: bash
      env:
        version: ""
      run: |
        dotnet tool restore || true
        dotnet restore

    - name: Validate NuGet Dependencies
      working-directory: ${{ inputs.path }}
      shell: bash
      run: |
        echo "Checking for non-compliant NuGet dependencies..."

        # Create output directory
        mkdir -p validation-results

        # Find all project files
        echo "Finding .csproj files..."
        PROJECT_FILES=$(find . -name "*.csproj" -not -path "*/obj/*" -not -path "*/bin/*")

        # Initialize results file
        echo "[]" > validation-results/non-compliant-packages.json

        # Track if we found any non-compliant packages
        FOUND_NON_COMPLIANT=false

        # Process each project file
        for PROJECT_FILE in $PROJECT_FILES; do
          PROJECT_NAME=$(basename "${PROJECT_FILE%.*}")
          echo "Analyzing $PROJECT_NAME..."

          # Get direct dependencies only (no transitive)
          DEPS=$(dotnet list "$PROJECT_FILE" package | grep -A 100 "Project reference" | grep -B 100 "Transitive" | grep -v "Project reference" | grep -v "Transitive" | grep -E "^\s+>")

          # Process each dependency
          while IFS= read -r DEP_LINE; do
            if [[ -n "$DEP_LINE" ]]; then
              # Extract package name and version
              PACKAGE_NAME=$(echo "$DEP_LINE" | awk '{print $2}')
              PACKAGE_VERSION=$(echo "$DEP_LINE" | awk '{print $3}')

              # Check if version is below 1.0.0 or contains a dash
              if [[ "$PACKAGE_VERSION" == 0.* || "$PACKAGE_VERSION" == *-* ]]; then
                FOUND_NON_COMPLIANT=true
                echo "  ❌ Non-compliant: $PACKAGE_NAME ($PACKAGE_VERSION)"

                # Add to JSON results
                TMP_FILE=$(mktemp)
                jq --arg project "$PROJECT_NAME" \
                   --arg package "$PACKAGE_NAME" \
                   --arg version "$PACKAGE_VERSION" \
                   --arg file "$PROJECT_FILE" \
                   '. += [{"project": $project, "package": $package, "version": $version, "file": $file}]' \
                   validation-results/non-compliant-packages.json > "$TMP_FILE"
                mv "$TMP_FILE" validation-results/non-compliant-packages.json
              fi
            fi
          done <<< "$DEPS"
        done

        # Generate summary report
        if [ "$FOUND_NON_COMPLIANT" = true ]; then
          echo "📋 Summary of non-compliant packages:"
          jq -r '.[] | "  - \(.package) (\(.version)) in \(.project)"' validation-results/non-compliant-packages.json

          echo "::warning::Found non-compliant NuGet packages. See artifact for details."
        else
          echo "✅ All NuGet dependencies comply with version policy."
        fi

    - name: Upload validation results
      uses: actions/upload-artifact@v4
      with:
        name: nuget-validation-results
        path: validation-results/non-compliant-packages.json
        retention-days: 90
        if-no-files-found: warn

    - name: Lint
      working-directory: ${{ inputs.path }}
      shell: bash
      env:
        version: ""
      run: dotnet format --verify-no-changes -v diag

    - name: Test
      working-directory: ${{ inputs.path }}
      shell: bash
      env:
        version: ""
      run: dotnet test --no-restore -warnaserror --logger:"console;verbosity=normal"
