name: Dotnet Validate

description: Lints and tests a domain.

inputs:
  path:
    description: The path of the parent folder of the solution.
    required: true

  dotnet-version:
    description: The version of dotnet to use
    required: true

  pin-version:
    description: Pin dotnet version
    default: "false"
    required: false

runs:
  using: composite

  steps:
    - name: Setup dotnet
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ inputs.dotnet-version }}

    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Pin version
      working-directory: ${{ inputs.path }}
      shell: bash
      if: ${{ inputs.pin-version == 'true' }}
      run: printf '{"sdk":{"rollForward":"disable","version":"%s"}}' "${{ inputs.dotnet-version }}" > global.json

    - name: Print dotnet version
      working-directory: ${{ inputs.path }}
      shell: bash
      run: dotnet --version

    - name: Print dotnet information
      working-directory: ${{ inputs.path }}
      shell: bash
      run: dotnet --info

    - name: Restore
      working-directory: ${{ inputs.path }}
      shell: bash
      run: |
        dotnet tool restore || true
        dotnet restore

    - name: Fail on prerelease or <1.0.0 packages
      working-directory: ${{ inputs.path }}
      shell: bash
      run: |
        found_unstable=0

        # Check all .sln files in the root. Adjust if needed to search subdirectories.
        for sln in *.sln
        do
          if [ -f "$sln" ]; then
            echo "Checking packages for solution: $sln"
            out=$(dotnet list "$sln" package --include-transitive 2>&1)
            echo "$out"

            # If the output contains a dash or a 0.x.x version, mark as unstable
            if echo "$out" | grep -Eq '(^|[^0-9])0\.[[:digit:]]|-' ; then
                found_unstable=1
            fi
          fi
        done

        # Also check any standalone .csproj files (recursively) if no .sln or in addition
        for csproj in **/*.csproj
        do
          if [ -f "$csproj" ]; then
            echo "Checking packages for project: $csproj"
            out=$(dotnet list "$csproj" package --include-transitive 2>&1)
            echo "$out"
            if echo "$out" | grep -Eq '(^|[^0-9])0\.[[:digit:]]|-' ; then
                found_unstable=1
            fi
          fi
        done

        if [ "$found_unstable" -eq 1 ]; then
          echo "❌ Found prerelease (dash) or <1.0.0 packages (major=0). Failing the build..."
          exit 1
        else
          echo "✅ All packages are >=1.0.0 and are stable releases (no dash)."
        fi

    - name: Lint
      working-directory: ${{ inputs.path }}
      shell: bash
      run: dotnet format --verify-no-changes -v diag

    - name: Test
      working-directory: ${{ inputs.path }}
      shell: bash
      run: dotnet test --no-restore -warnaserror --logger:"console;verbosity=normal"
