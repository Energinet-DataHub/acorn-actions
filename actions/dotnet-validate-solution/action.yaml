name: Dotnet Validate

description: Lints and tests a domain.

inputs:
  path:
    description: The path of the parent folder of the solution.
    required: true

  dotnet-version:
    description: The version of dotnet to use
    required: true

  pin-version:
    description: Pin dotnet version
    default: "false"
    required: false

  generate-report:
    description: Disable the console output, and generate a trx test report.
    default: "false"
    required: false

runs:
  using: composite

  steps:
    - name: Setup dotnet
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ inputs.dotnet-version }}

    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Pin version
      working-directory: ${{ inputs.path }}
      shell: bash
      if: ${{ inputs.pin-version == 'true' }}
      run: printf '{"sdk":{"rollForward":"disable","version":"%s"}}' "${{ inputs.dotnet-version }}" > global.json

    - name: Print dotnet version
      working-directory: ${{ inputs.path }}
      shell: bash
      run: dotnet --version

    - name: Print dotnet information
      working-directory: ${{ inputs.path }}
      shell: bash
      run: dotnet --info
      
    - name: Add dotnet tools to PATH
      working-directory: ${{ inputs.path }}
      shell: bash
      run: echo "$HOME/.dotnet/tools" >> $GITHUB_PATH

    - name: Install dotnet-trx
      working-directory: ${{ inputs.path }}
      shell: bash
      run: dotnet tool install -g dotnet-trx

    - name: Restore
      working-directory: ${{ inputs.path }}
      shell: bash
      env:
        version: ""
      run: |
        dotnet tool restore || true
        dotnet restore

    - name: Lint code
      working-directory: ${{ inputs.path }}
      shell: bash
      run: dotnet format --verify-no-changes

    - name: Run tests
      working-directory: ${{ inputs.path }}
      shell: bash
      run: |
        dotnet test --logger trx;LogFileName=test_results.trx
        echo "::set-output name=trx_path::test_results.trx"

    - name: Generate test results report
      working-directory: ${{ inputs.path }}
      shell: bash
      if: always()
      run: |
        trx --path ${{ inputs.path }} --output --gh-comment --gh-summary
