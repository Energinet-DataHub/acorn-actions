name: Dotnet Validate

description: Lints and tests a domain.

inputs:
  path:
    description: The path of the parent folder of the solution.
    required: true

  dotnet-version:
    description: The version of dotnet to use
    required: true

  pin-version:
    description: Pin dotnet version
    default: "false"
    required: false

  generate-report:
    description: The output format for dotnet tests
    default: "false"
    required: false

runs:
  using: composite

  steps:
    - name: Setup dotnet
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ inputs.dotnet-version }}

    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Pin version
      working-directory: ${{ inputs.path }}
      shell: bash
      if: ${{ inputs.pin-version == 'true' }}
      run: printf '{"sdk":{"rollForward":"disable","version":"%s"}}' "${{ inputs.dotnet-version }}" > global.json

    - name: Print dotnet version
      working-directory: ${{ inputs.path }}
      shell: bash
      run: dotnet --version

    - name: Print dotnet information
      working-directory: ${{ inputs.path }}
      shell: bash
      run: dotnet --info

    - name: Restore
      working-directory: ${{ inputs.path }}
      shell: bash
      env:
        version: ""
      run: |
        dotnet tool restore || true
        dotnet restore

    - name: Lint and Test in Parallel
      working-directory: ${{ inputs.path }}
      shell: bash
      run: |
        set -e
        FORMAT_LOG="dotnet_format.log"
        dotnet format --verify-no-changes -v diag > "$FORMAT_LOG" 2>&1 &
        FORMAT_PID=$!

        dotnet test --no-restore -warnaserror --logger "${{ inputs.generate-report == 'true' && 'trx;LogFileName=test_results.trx' || 'console;verbosity=normal' }}"
        TEST_EXIT_CODE=$?

        wait $FORMAT_PID
        FORMAT_EXIT_CODE=$?

        if [ $FORMAT_EXIT_CODE -ne 0 ]; then
          echo "dotnet format failed"
          echo "--------------------------------------------"
          cat "$FORMAT_LOG"
          echo "--------------------------------------------"
          exit $FORMAT_EXIT_CODE
        fi

        if [ $TEST_EXIT_CODE -ne 0 ]; then
          echo "dotnet test failed"
          exit $TEST_EXIT_CODE
        fi
